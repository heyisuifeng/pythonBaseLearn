第一小节、if
1、if...else...
在Python程序中，可以用if语句实现：

age = 20
if age >= 18:
    print 'your age is', age
    print 'adult'
print 'END'
注意: Python代码的缩进规则。具有相同缩进的代码被视为代码块，上面的3，4行 print 语句就构成一个代码块（但不包括第5行的print）。如果 if 语句判断为 True，就会执行这个代码块。

缩进请严格按照Python的习惯写法：4个空格，不要使用Tab，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。

注意: if 语句后接表达式，然后用:表示代码块开始。

如果你在Python交互环境下敲代码，还要特别留意缩进，并且退出缩进需要多敲一行回车：

>>> age = 20
>>> if age >= 18:
...     print 'your age is', age
...     print 'adult'
...		
your age is 20
adult

当 if 语句判断表达式的结果为 True 时，就会执行 if 包含的代码块：

if age >= 18:
    print 'adult'
如果我们想判断年龄在18岁以下时，打印出 'teenager'，怎么办？

方法是再写一个 if:

if age < 18:
    print 'teenager'
或者用 not 运算：

if not age >= 18:
    print 'teenager'
细心的同学可以发现，这两种条件判断是“非此即彼”的，要么符合条件1，要么符合条件2，因此，完全可以用一个 if ... else ... 语句把它们统一起来：

if age >= 18:
    print 'adult'
else:
    print 'teenager'
利用 if ... else ... 语句，我们可以根据条件表达式的值为 True 或者 False ，分别执行 if 代码块或者 else 代码块。

注意: else 后面有个“:”。

要避免嵌套结构的 if ... else ...，我们可以用 if ... 多个elif ... else ... 的结构，一次写完所有的规则：

if age >= 18:
    print 'adult'
elif age >= 6:
    print 'teenager'
elif age >= 3:
    print 'kid'
else:
    print 'baby'
elif 意思就是 else if。这样一来，我们就写出了结构非常清晰的一系列条件判断。

第二节 for循环
Python的 for 循环就可以依次把list或tuple的每个元素迭代出来：

L = ['Adam', 'Lisa', 'Bart']
for name in L:
    print name
注意:  name 这个变量是在 for 循环中定义的，意思是，依次取出list中的每一个元素，并把元素赋值给 name，然后执行for循环体（就是缩进的代码块）。

第三节 while循环
和 for 循环不同的另一种循环是 while 循环，while 循环不会迭代 list 或 tuple 的元素，而是根据表达式判断循环是否结束。

比如要从 0 开始打印不大于 N 的整数：

N = 10
x = 0
while x < N:
    print x
    x = x + 1
while循环每次先判断 x < N，如果为True，则执行循环体的代码块，否则，退出循环。

用 for 循环或者 while 循环时，如果要在循环体内直接退出循环，可以使用 break 语句。
sum = 0
x = 1
while True:
    sum = sum + x
    x = x + 1
    if x > 100:
        break
print sum

在循环过程中，可以用break退出当前循环，还可以用continue跳过后续循环代码，继续下一次循环。

L = [75, 98, 59, 81, 66, 43, 69, 85]
sum = 0.0
n = 0
for x in L:
    if x < 60:
        continue
    sum = sum + x
    n = n + 1
	
多重循环
for x in ['A', 'B', 'C']:
    for y in ['1', '2', '3']:
        print x + y
